[metadata]
name = vds_api_client
summary = VanderSat API client package
author = Teije
author-email = tvanderhorst@vandersat.com
license = mit
long-description = file: README.rst
long-description-content-type = text/x-rst; charset=UTF-8
url = https://www.vandersat.com/
project-urls =
    Source Code = https://github.com/vandersat/vds-api-client
    PyPI = https://pypi.org/project/vds-api-client/
    API Documentation = https://docs.vandersat.com/user/api_user_guide.html
platforms = any
description-file = README.rst
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifier =
    Development Status :: 4 - Beta
    Programming Language :: Python

# Python 3.6 and up, python<4
python_requires='~=3.6',

[options]
# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
setup_requires = pyscaffold>=3.2a0,<3.3a0
# Add here dependencies of your project (semicolon/line-separated), e.g.
# install_requires = numpy; scipy
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
# python_requires = >=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*

[entry_points]
# Add here console scripts like:
console_scripts =
    vds-api = vds_api_client.api_cli:api
# console_scripts =
#     script_name = vds_api_client.module:function
# For example:
# console_scripts =
#     fibonacci = vds_api_client.skeleton:run
# as well as other entry_points.


[files]
# Add here 'data_files', 'packages' or 'namespace_packages'.
# Additional data files are defined as key value pairs of target directory
# and source location from the root of the repository:
packages =
    vds_api_client
# data_files =
#    share/vds_api_client_docs = docs/*

[extras]
# Add here additional requirements for extra features, to install with:
# `pip install vds-api-client[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing =
    pytest
    pytest-cov
docs =
    sphinx

[test]
# py.test options when running `python setup.py test`
extras = True
addopts = tests

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov vds_api_client --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox

[aliases]
docs = build_sphinx
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = docs/_build

[pbr]
# Let pbr run sphinx-apidoc
autodoc_tree_index_modules = True
# autodoc_tree_excludes = ...
# Let pbr itself generate the apidoc
# autodoc_index_modules = True
# autodoc_exclude_modules = ...
# Convert warnings to errors
# warnerrors = True

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 3.2.3
package = vds_api_client
